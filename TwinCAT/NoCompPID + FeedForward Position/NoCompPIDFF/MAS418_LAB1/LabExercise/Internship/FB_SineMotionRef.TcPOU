<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SineMotionRef" Id="{8a66164f-2ec5-4288-969f-ec4a36804cae}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SineMotionRef
VAR_INPUT
	ssMethodType: SINT;
	fTime: LREAL;
	fPos_Ramp_Time: LREAL;
	fPeak_pos: LREAL;
	fStart_vel: LREAL;
	fStart_time: LREAL;
	fHold_time: LREAL;
	fXStart: LREAL;
END_VAR
VAR_OUTPUT
	X_dot: LREAL;
	X: LREAL;
END_VAR
VAR
	peak_vel: LREAL;
	amplitude_vel: LREAL;
	c_DiscreteTimeIntegrator_DS: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE ssMethodType OF
    SS_INITIALIZE: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/FB_SineMotionRef' *)
        (* InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := 0.0;
        (* End of SystemInitialize for SubSystem: '<Root>/FB_SineMotionRef' *)
    SS_STEP: 
        (* Outputs for Atomic SubSystem: '<Root>/FB_SineMotionRef' *)
        (* MATLAB Function: '<S1>/MATLAB Function' *)
        (* MATLAB Function 'FB_SineMotionRef/MATLAB Function': '<S2>:1' *)
        (* '<S2>:1:2' max_pos = peak_pos-start_pos; *)
        (* '<S2>:1:3' peak_vel = max_pos*2/pos_ramp_time; *)
        peak_vel := ((fPeak_pos - fXStart) * 2.0) / fPos_Ramp_Time;
        (* '<S2>:1:4' pos_sat = peak_vel*pos_ramp_time/2 +start_pos; *)
        (* '<S2>:1:5' amplitude_vel = peak_vel/2; *)
        amplitude_vel := peak_vel / 2.0;
        (* '<S2>:1:6' if pos_sat <= 0.4 *)

        IF (((peak_vel * fPos_Ramp_Time) / 2.0) + fXStart) <= 0.4 THEN 
            (* '<S2>:1:7' if time<start_time *)

            IF fTime < fStart_time THEN 
                (* '<S2>:1:8' X_dot=start_vel; *)
                X_dot := fStart_vel;
            ELSIF fTime <= (fPos_Ramp_Time + fStart_time) THEN 
                (* '<S2>:1:9' elseif time<=pos_ramp_time+start_time *)
                (* '<S2>:1:10' X_dot=amplitude_vel-amplitude_vel*cos((2*(time-start_time))/pos_ramp_time*pi)+start_vel; *)
                X_dot := (amplitude_vel - (COS((((fTime - fStart_time) * 2.0) / fPos_Ramp_Time) * 3.1415926535897931) * amplitude_vel)) + fStart_vel;
            ELSIF fTime < ((fHold_time + fPos_Ramp_Time) + fStart_time) THEN 
                (* '<S2>:1:11' elseif time<hold_time+pos_ramp_time+start_time *)
                (* '<S2>:1:12' X_dot=start_vel; *)
                X_dot := fStart_vel;
            ELSIF fTime < (((2.0 * fPos_Ramp_Time) + fHold_time) + fStart_time) THEN 
                (* '<S2>:1:13' elseif time< hold_time+2*pos_ramp_time+start_time *)
                (* '<S2>:1:14' X_dot=-(amplitude_vel-amplitude_vel*cos((2*(time-(start_time +hold_time+pos_ramp_time)))/pos_ramp_time*pi)+start_vel); *)
                X_dot :=  -((amplitude_vel - (COS((((fTime - ((fStart_time + fHold_time) + fPos_Ramp_Time)) * 2.0) / fPos_Ramp_Time) * 3.1415926535897931) * amplitude_vel)) + fStart_vel);
            ELSE 
                (* '<S2>:1:15' else *)
                (* '<S2>:1:16' X_dot=start_vel; *)
                X_dot := fStart_vel;
            END_IF;

        ELSE 
            (* '<S2>:1:18' else *)
            (* '<S2>:1:19' X_dot=0; *)
            X_dot := 0.0;
        END_IF;

        (* End of MATLAB Function: '<S1>/MATLAB Function' *)
        

        (* Outport: '<Root>/X' incorporates:
         *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
         *  Sum: '<S1>/Sum' *)
        X := c_DiscreteTimeIntegrator_DS + fXStart;
        (* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := (0.001 * X_dot) + c_DiscreteTimeIntegrator_DS;
        (* End of Outputs for SubSystem: '<Root>/FB_SineMotionRef' *)
END_CASE;


]]></ST>
    </Implementation>
    <LineIds Name="FB_SineMotionRef">
      <LineId Id="3" Count="62" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>