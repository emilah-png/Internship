<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!--(*
 *
 * File: Simulink_PLC_coder_example_LAB_10.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "Simulink_PLC_coder_example_LAB_10/FB_MotionReferenceGenerator_nolimit"
 *
 * Model name                      : Simulink_PLC_coder_example_LAB_10
 * Model version                   : 11.6
 * Model creator                   : Jan StÃ¸rbu
 * Model last modified by          : hagen
 * Model last modified on          : Mon Mar 11 21:07:47 2024
 * Model sample time               : 0.01s
 * Subsystem name                  : Simulink_PLC_coder_example_LAB_10/FB_MotionReferenceGenerator_nolimit
 * Subsystem sample time           : 0.01s
 * Simulink PLC Coder version      : 24.2 (R2024b) 21-Jun-2024
 * ST code generated on            : Fri Nov 01 13:20:54 2024
 *
 * Target IDE selection            : Beckhoff TwinCAT 3
 * Test Bench included             : No
 *
 *)
-->
  <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2024-11-01T13:20:54" productName="Simulink PLC Coder" productRelease="(R2024b)" productVersion="24.2"/>
  <contentHeader name="Simulink_PLC_coder_example_LAB_10">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="c_FB_MotionReferenceGenerat" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="fStartPosition_m">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fStartVelocity_m">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fPositionSetpoint_ms">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fVelocitySetpoint_m">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fTimeBeforeStarting_s">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fRampTime_s">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fHoldPositionTime_s">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fClock_s">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="bEnable">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="fPositionReference_m">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fVelocityReference_ms">
              <type>
                <LREAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="Error">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="slopeExt">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="slopeRetr">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="tHold">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x1">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x4">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x1_tmp_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x4_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x4_tmp_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x4_tmp_tmp_0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x1_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
(* Outputs for Atomic SubSystem: '<Root>/FB_MotionReferenceGenerator_nolimit' *)
(* MATLAB Function: '<S1>/WaveSignal' *)
(* MATLAB Function 'FB_MotionReferenceGenerator_nolimit/WaveSignal': '<S2>:1' *)
(* '<S2>:1:2' x_SP = x_ref - x0; *)
(* '<S2>:1:3' vs=v_ref; *)
(* '<S2>:1:4' slopeExt=v0-vs; *)
slopeExt := fStartVelocity_m - fVelocitySetpoint_m;
(* '<S2>:1:5' slopeRetr=-vs-v0; *)
slopeRetr := ( -fVelocitySetpoint_m) - fStartVelocity_m;
(* '<S2>:1:7' as = vs/tRamp; *)
(* '<S2>:1:8' s_acc=(vs^2-v0^2)/as; *)
(* '<S2>:1:10' tHold=(x_SP-s_acc)/vs; *)
tHold := ((fPositionSetpoint_ms - fStartPosition_m) - (((fVelocitySetpoint_m * fVelocitySetpoint_m) - (fStartVelocity_m * fStartVelocity_m)) / (fVelocitySetpoint_m / fRampTime_s))) / fVelocitySetpoint_m;
(* '<S2>:1:12' if tHold < 0 *)

IF tHold < 0.0 THEN 
    (* '<S2>:1:13' Error = 1; *)
    Error := 1;
ELSE 
    (* '<S2>:1:14' else *)
    (* '<S2>:1:15' Error = 0; *)
    Error := 0;
END_IF;

(* '<S2>:1:18' t1=tRamp; *)
(* '<S2>:1:19' t2=tHold; *)
(* '<S2>:1:20' t3=tRamp; *)
(* '<S2>:1:21' t4=tWait; *)
(* '<S2>:1:22' t5=t1; *)
(* '<S2>:1:23' t6=t2; *)
(* '<S2>:1:24' t7=t3; *)
(* '<S2>:1:26' x = x0; *)
(* '<S2>:1:27' x1 = x0 + v0*((t0+t1)-t0)-(slopeExt/t1)*((t0+t1)-t0)^2/2; *)
x1_tmp_tmp := fTimeBeforeStarting_s + fRampTime_s;
x4 := x1_tmp_tmp - fTimeBeforeStarting_s;
x1_tmp := slopeExt / fRampTime_s;
x1 := ((x4 * fStartVelocity_m) + fStartPosition_m) - ((x1_tmp * (x4 * x4)) / 2.0);
(* '<S2>:1:28' x2 = x1 + vs*((t0+t1+t2)-(t0+t1)); *)
(* '<S2>:1:29' x4 = x_ref - v0*((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4))+(slopeRetr/t5)*((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4))^2/2; *)
x4_tmp_tmp := x1_tmp_tmp + tHold;
x4_tmp_tmp_0 := x4_tmp_tmp + fRampTime_s;
x4_tmp := x4_tmp_tmp_0 + fHoldPositionTime_s;
x4 := (x4_tmp + fRampTime_s) - x4_tmp;
x4 := (fPositionSetpoint_ms - (x4 * fStartVelocity_m)) + (((slopeRetr / fRampTime_s) * (x4 * x4)) / 2.0);
(* '<S2>:1:30' x5 = x4-vs*((t0+t1+t2+t3+t4+t5+t6)-(t0+t1+t2+t3+t4+t5)); *)
(* '<S2>:1:32' if Error == 1 *)

IF Error = 1 THEN 
    (* '<S2>:1:33' x = x0; *)
    fPositionReference_m := fStartPosition_m;
    (* '<S2>:1:34' v = v0; *)
    fVelocityReference_ms := fStartVelocity_m;
ELSIF (fClock_s >= 0.0) AND (fClock_s < fTimeBeforeStarting_s) THEN 
    (* '<S2>:1:35' elseif t>=0 && t<t0 *)
    (* '<S2>:1:36' x = x0; *)
    fPositionReference_m := fStartPosition_m;
    (* '<S2>:1:37' v = v0; *)
    fVelocityReference_ms := fStartVelocity_m;
ELSIF (fClock_s >= fTimeBeforeStarting_s) AND (fClock_s < x1_tmp_tmp) THEN 
    (* '<S2>:1:38' elseif t>=t0 && t<(t0+t1) *)
    (* '<S2>:1:39' x = x0 + v0*(t-t0)-(slopeExt/t1)*(t-t0)^2/2; *)
    slopeExt := fClock_s - fTimeBeforeStarting_s;
    fPositionReference_m := ((slopeExt * fStartVelocity_m) + fStartPosition_m) - ((x1_tmp * (slopeExt * slopeExt)) / 2.0);
    (* '<S2>:1:40' v = v0-(slopeExt/t1)*(t-t0); *)
    fVelocityReference_ms := fStartVelocity_m - (x1_tmp * slopeExt);
ELSIF (fClock_s >= x1_tmp_tmp) AND (fClock_s < x4_tmp_tmp) THEN 
    (* '<S2>:1:41' elseif t>=(t0+t1) && t<(t0+t1+t2) *)
    (* '<S2>:1:42' x = x1 + vs*(t-(t0+t1)); *)
    fPositionReference_m := ((fClock_s - x1_tmp_tmp) * fVelocitySetpoint_m) + x1;
    (* '<S2>:1:43' v = vs; *)
    fVelocityReference_ms := fVelocitySetpoint_m;
ELSIF (fClock_s >= x4_tmp_tmp) AND (fClock_s < x4_tmp_tmp_0) THEN 
    (* '<S2>:1:44' elseif t>=(t0+t1+t2) && t<(t0+t1+t2+t3) *)
    (* '<S2>:1:45' x = x2+vs*(t-(t0+t1+t2))+(slopeExt/t3)*(t-(t0+t1+t2))^2/2; *)
    tHold := (fTimeBeforeStarting_s + fRampTime_s) + tHold;
    slopeRetr := fClock_s - tHold;
    fPositionReference_m := ((((tHold - x1_tmp_tmp) * fVelocitySetpoint_m) + x1) + (slopeRetr * fVelocitySetpoint_m)) + ((x1_tmp * (slopeRetr * slopeRetr)) / 2.0);
    (* '<S2>:1:46' v = vs+(slopeExt/t3)*(t-(t0+t1+t2)); *)
    fVelocityReference_ms := (slopeRetr * (slopeExt / fRampTime_s)) + fVelocitySetpoint_m;
ELSIF (fClock_s >= x4_tmp_tmp_0) AND (fClock_s < x4_tmp) THEN 
    (* '<S2>:1:47' elseif t>=(t0+t1+t2+t3) && t<(t0+t1+t2+t3+t4) *)
    (* '<S2>:1:48' x = x_ref; *)
    fPositionReference_m := fPositionSetpoint_ms;
    (* '<S2>:1:49' v = v0; *)
    fVelocityReference_ms := fStartVelocity_m;
ELSE 
    x1_tmp := ((x1_tmp_tmp + tHold) + fRampTime_s) + fHoldPositionTime_s;
    slopeExt := x1_tmp + fRampTime_s;

    IF (fClock_s >= x1_tmp) AND (fClock_s < slopeExt) THEN 
        (* '<S2>:1:50' elseif t>=(t0+t1+t2+t3+t4) && t<(t0+t1+t2+t3+t4+t5) *)
        (* '<S2>:1:51' x = x_ref - v0*(t-(t0+t1+t2+t3+t4))+(slopeRetr/t5)*(t-(t0+t1+t2+t3+t4))^2/2; *)
        tHold := fClock_s - x1_tmp;
        slopeRetr := slopeRetr / fRampTime_s;
        fPositionReference_m := (fPositionSetpoint_ms - (tHold * fStartVelocity_m)) + ((slopeRetr * (tHold * tHold)) / 2.0);
        (* '<S2>:1:52' v = v0+(slopeRetr/t5)*(t-(t0+t1+t2+t3+t4)); *)
        fVelocityReference_ms := (tHold * slopeRetr) + fStartVelocity_m;
    ELSE 
        x1_tmp := slopeExt + tHold;

        IF (fClock_s >= slopeExt) AND (fClock_s < x1_tmp) THEN 
            (* '<S2>:1:53' elseif t>=(t0+t1+t2+t3+t4+t5) && t<(t0+t1+t2+t3+t4+t5+t6) *)
            (* '<S2>:1:54' x = x4-vs*(t-(t0+t1+t2+t3+t4+t5)); *)
            fPositionReference_m := x4 - ((fClock_s - slopeExt) * fVelocitySetpoint_m);
            (* '<S2>:1:55' v = -vs; *)
            fVelocityReference_ms :=  -fVelocitySetpoint_m;
        ELSIF (fClock_s >= x1_tmp) AND (fClock_s < (x1_tmp + fRampTime_s)) THEN 
            (* '<S2>:1:56' elseif t>=(t0+t1+t2+t3+t4+t5+t6) && t<(t0+t1+t2+t3+t4+t5+t6+t7) *)
            (* '<S2>:1:57' x = x5-vs*(t-(t0+t1+t2+t3+t4+t5+t6))-(slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6))^2/2; *)
            tHold := fClock_s - x1_tmp;
            slopeRetr := slopeRetr / fRampTime_s;
            fPositionReference_m := ((x4 - ((x1_tmp - slopeExt) * fVelocitySetpoint_m)) - (tHold * fVelocitySetpoint_m)) - ((slopeRetr * (tHold * tHold)) / 2.0);
            (* '<S2>:1:58' v = -vs-(slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6)); *)
            fVelocityReference_ms := ( -fVelocitySetpoint_m) - (tHold * slopeRetr);
        ELSE 
            (* '<S2>:1:59' else *)
            (* '<S2>:1:60' x = x0; *)
            fPositionReference_m := fStartPosition_m;
            (* '<S2>:1:61' v = v0; *)
            fVelocityReference_ms := fStartVelocity_m;
        END_IF;

    END_IF;

END_IF;

(* End of MATLAB Function: '<S1>/WaveSignal' *)


(* Switch: '<S1>/Switch' incorporates:
 *  Switch: '<S1>/Switch1' *)
(* '<S2>:1:64' T = t0+t1+t2+t3+t4+t5+t6+t7; *)

IF  NOT bEnable THEN 
    (* Outport: '<Root>/fVelocityReference_ms' *)
    fVelocityReference_ms := fStartVelocity_m;
    (* Outport: '<Root>/fPositionReference_m' *)
    fPositionReference_m := fStartPosition_m;
END_IF;

(* End of Switch: '<S1>/Switch' *)
(* End of Outputs for SubSystem: '<Root>/FB_MotionReferenceGenerator_nolimit' *)

]]></xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations/>
  </instances>
</project>
