<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!--(*
 *
 * File: Sim2Twin_controlsystem_pos_Discrete.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "Sim2Twin_controlsystem_pos_Discrete/FB_SineMotionRef"
 *
 * Model name                      : Sim2Twin_controlsystem_pos_Discrete
 * Model version                   : 1.18
 * Model creator                   : Emila
 * Model last modified by          : Green Crane Testbed
 * Model last modified on          : Mon Nov 11 11:36:58 2024
 * Model sample time               : 0.001s
 * Subsystem name                  : Sim2Twin_controlsystem_pos_Discrete/FB_SineMotionRef
 * Subsystem sample time           : 0.001s
 * Simulink PLC Coder version      : 24.2 (R2024b) 21-Jun-2024
 * ST code generated on            : Mon Nov 11 18:16:56 2024
 *
 * Target IDE selection            : Beckhoff TwinCAT 3
 * Test Bench included             : No
 *
 *)
-->
  <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2024-11-11T18:16:55" productName="Simulink PLC Coder" productRelease="(R2024b)" productVersion="24.2"/>
  <contentHeader name="Sim2Twin_controlsystem_pos_Discrete">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="FB_SineMotionRef" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ssMethodType">
              <type>
                <SINT/>
              </type>
            </variable>
            <variable name="fTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fPos_Ramp_Time">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fPeak_pos">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fStart_vel">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fStart_time">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fHold_time">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fXReal">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="X_dot">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="X">
              <type>
                <LREAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="peak_vel">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="amplitude_vel">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="c_DiscreteTimeIntegrator_DS">
              <type>
                <LREAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[

CASE ssMethodType OF
    SS_INITIALIZE: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/FB_SineMotionRef' *)
        (* InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := 0.0;
        (* End of SystemInitialize for SubSystem: '<Root>/FB_SineMotionRef' *)
    SS_STEP: 
        (* Outputs for Atomic SubSystem: '<Root>/FB_SineMotionRef' *)
        (* MATLAB Function: '<S1>/MATLAB Function' *)
        (* MATLAB Function 'FB_SineMotionRef/MATLAB Function': '<S2>:1' *)
        (* '<S2>:1:2' max_pos = peak_pos-start_pos; *)
        (* '<S2>:1:3' peak_vel = max_pos*2/pos_ramp_time; *)
        peak_vel := ((fPeak_pos - fXReal) * 2.0) / fPos_Ramp_Time;
        (* '<S2>:1:4' pos_sat = peak_vel*pos_ramp_time/2 +start_pos; *)
        (* '<S2>:1:5' amplitude_vel = peak_vel/2; *)
        amplitude_vel := peak_vel / 2.0;
        (* '<S2>:1:6' if pos_sat <= 0.4 *)

        IF (((peak_vel * fPos_Ramp_Time) / 2.0) + fXReal) <= 0.4 THEN 
            (* '<S2>:1:7' if time<start_time *)

            IF fTime < fStart_time THEN 
                (* '<S2>:1:8' X_dot=start_vel; *)
                X_dot := fStart_vel;
            ELSIF fTime <= (fPos_Ramp_Time + fStart_time) THEN 
                (* '<S2>:1:9' elseif time<=pos_ramp_time+start_time *)
                (* '<S2>:1:10' X_dot=amplitude_vel-amplitude_vel*cos((2*(time-start_time))/pos_ramp_time*pi)+start_vel; *)
                X_dot := (amplitude_vel - (COS((((fTime - fStart_time) * 2.0) / fPos_Ramp_Time) * 3.1415926535897931) * amplitude_vel)) + fStart_vel;
            ELSIF fTime < ((fHold_time + fPos_Ramp_Time) + fStart_time) THEN 
                (* '<S2>:1:11' elseif time<hold_time+pos_ramp_time+start_time *)
                (* '<S2>:1:12' X_dot=start_vel; *)
                X_dot := fStart_vel;
            ELSIF fTime < (((2.0 * fPos_Ramp_Time) + fHold_time) + fStart_time) THEN 
                (* '<S2>:1:13' elseif time< hold_time+2*pos_ramp_time+start_time *)
                (* '<S2>:1:14' X_dot=-(amplitude_vel-amplitude_vel*cos((2*(time-(start_time +hold_time+pos_ramp_time)))/pos_ramp_time*pi)+start_vel); *)
                X_dot :=  -((amplitude_vel - (COS((((fTime - ((fStart_time + fHold_time) + fPos_Ramp_Time)) * 2.0) / fPos_Ramp_Time) * 3.1415926535897931) * amplitude_vel)) + fStart_vel);
            ELSE 
                (* '<S2>:1:15' else *)
                (* '<S2>:1:16' X_dot=start_vel; *)
                X_dot := fStart_vel;
            END_IF;

        ELSE 
            (* '<S2>:1:18' else *)
            (* '<S2>:1:19' X_dot=0; *)
            X_dot := 0.0;
        END_IF;

        (* End of MATLAB Function: '<S1>/MATLAB Function' *)
        

        (* Outport: '<Root>/X' incorporates:
         *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
         *  Sum: '<S1>/Sum' *)
        X := c_DiscreteTimeIntegrator_DS + fXReal;
        (* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := (0.001 * X_dot) + c_DiscreteTimeIntegrator_DS;
        (* End of Outputs for SubSystem: '<Root>/FB_SineMotionRef' *)
END_CASE;


]]></xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Configuration">
        <resource name="Sim2Twin_controlsystem_pos_Discrete_res">
          <globalVars constant="true">
            <variable name="SS_INITIALIZE">
              <type>
                <SINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="SS_STEP">
              <type>
                <SINT/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
